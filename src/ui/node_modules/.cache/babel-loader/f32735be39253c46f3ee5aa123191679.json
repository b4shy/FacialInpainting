{"ast":null,"code":"var _jsxFileName = \"/home/laptop/Documents/Uni/TUEML/Inpainting/FacialInpainting/src/ui/src/components/predictionButton/index.js\";\nimport React, { Component } from 'react';\nimport Button from '@material-ui/core/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { IMAGE_SIZE } from '../../constants';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\nexport default class index extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoading: false,\n      dialogOpen: false\n    };\n    this.handleClose = this.handleClose.bind(this);\n    this.canvasRef = React.createRef();\n  }\n\n  async predict() {\n    const editCanvas = this.props.editCanvas.current.canvasRef.current;\n    const editContext = editCanvas.getContext('2d');\n    const editData = editContext.getImageData(0, 0, IMAGE_SIZE.width, IMAGE_SIZE.height).data; //const maskPNG = editCanvas.toDataURL(\"image/png\");\n    //console.log(\"predict:\", this.props.editCanvas.current.canvasRef.current.toDataURL());\n\n    const imageCanvas = this.props.imageCanvas.current.canvasRef.current;\n    const imageContext = imageCanvas.getContext('2d');\n    const imageData = imageContext.getImageData(0, 0, IMAGE_SIZE.width, IMAGE_SIZE.height).data; //const imgPNG = imageCanvas.toDataURL(\"image/png\");\n\n    var newImage = new Array(IMAGE_SIZE.height);\n\n    for (var y = 0; y < IMAGE_SIZE.height; y++) {\n      var imageRow = new Array(IMAGE_SIZE.width);\n\n      for (var x = 0; x < IMAGE_SIZE.width; x++) {\n        var pixel = [imageData[4 * (y * IMAGE_SIZE.width + x)], // red\n        imageData[4 * (y * IMAGE_SIZE.width + x) + 1], // green\n        imageData[4 * (y * IMAGE_SIZE.width + x) + 2], // blue\n        editData[4 * (y * IMAGE_SIZE.width + x) + 3] // alpha\n        ];\n        imageRow[x] = pixel;\n      }\n\n      newImage[y] = imageRow;\n    } //console.log(\"predict:\", newImage);\n\n    /*\r\n    var fileName = \"networkInputImage\";\r\n    //const json = JSON.stringify(newImage);\r\n    //const blob = new Blob([json], { type: 'application/json' });\r\n    //const href = await URL.createObjectURL(blob);\r\n    var link = document.createElement('a');\r\n    link.href = imgPNG;\r\n    link.download = fileName + \".png\";\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    document.body.removeChild(link);\r\n      fileName = \"networkInputMask\";\r\n    //const json = JSON.stringify(newImage);\r\n    //const blob = new Blob([json], { type: 'application/json' });\r\n    //const href = await URL.createObjectURL(blob);\r\n    var link = document.createElement('a');\r\n    link.href = maskPNG;\r\n    link.download = fileName + \".png\";\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    document.body.removeChild(link);*/\n    //TODO\n\n\n    this.setState({\n      isLoading: true\n    });\n    fetch('/inference', {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        image: newImage\n      })\n    }).then(response => response.json()).then(response => {\n      this.setState({\n        isLoading: false\n      });\n      console.log(response.image.length);\n      console.log(response);\n      console.log(response.image[0].length);\n      this.setState({\n        dialogOpen: true\n      });\n      const canvas = this.canvasRef.current;\n      const ctx = canvas.getContext('2d');\n      var imgData = ctx.createImageData(canvas.width, canvas.height);\n      var k = 0;\n\n      for (var i = 0; i < canvas.height; i++) {\n        for (var j = 0; j < canvas.width; j++) {\n          imgData.data[k++] = response.image[i][j][0];\n          imgData.data[k++] = response.image[i][j][1];\n          imgData.data[k++] = response.image[i][j][2];\n          imgData.data[k++] = 255;\n        }\n      }\n\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      ctx.putImageData(imgData, 0, 0);\n    });\n  }\n\n  handleClose() {\n    //console.log(\"this.state.dialogOpen\");\n    this.setState({\n      dialogOpen: false\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      style: {\n        position: 'relative'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"outlined\",\n      color: \"primary\",\n      onClick: this.predict.bind(this),\n      disabled: this.state.isLoading,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, \"Predict\", this.state.isLoading && React.createElement(CircularProgress, {\n      size: 24,\n      style: {\n        position: 'absolute',\n        top: '50%',\n        left: '50%',\n        marginTop: -12,\n        marginLeft: -12\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    })), React.createElement(Dialog, {\n      onClose: this.handleClose,\n      \"aria-labelledby\": \"dialog-title\",\n      open: this.state.dialogOpen,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, React.createElement(DialogTitle, {\n      id: \"dialog-title\",\n      onClose: this.handleClose,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, \"Load Image\"), React.createElement(DialogContent, {\n      dividers: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, React.createElement(\"canvas\", {\n      ref: this.canvasRef,\n      height: IMAGE_SIZE.height,\n      width: IMAGE_SIZE.width,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    })), React.createElement(DialogActions, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, React.createElement(Button, {\n      onClick: this.handleClose,\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, \"Close\"))));\n  }\n\n}","map":{"version":3,"sources":["/home/laptop/Documents/Uni/TUEML/Inpainting/FacialInpainting/src/ui/src/components/predictionButton/index.js"],"names":["React","Component","Button","CircularProgress","IMAGE_SIZE","Dialog","DialogTitle","DialogContent","DialogActions","index","constructor","props","state","isLoading","dialogOpen","handleClose","bind","canvasRef","createRef","predict","editCanvas","current","editContext","getContext","editData","getImageData","width","height","data","imageCanvas","imageContext","imageData","newImage","Array","y","imageRow","x","pixel","setState","fetch","method","headers","body","JSON","stringify","image","then","response","json","console","log","length","canvas","ctx","imgData","createImageData","k","i","j","clearRect","putImageData","render","position","top","left","marginTop","marginLeft"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport { IMAGE_SIZE } from '../../constants'\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\n\r\n\r\nexport default class index extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isLoading: false,\r\n            dialogOpen: false\r\n        };\r\n        this.handleClose = this.handleClose.bind(this);\r\n        this.canvasRef = React.createRef();\r\n    }\r\n    async predict() {\r\n        const editCanvas = this.props.editCanvas.current.canvasRef.current;\r\n        const editContext = editCanvas.getContext('2d');\r\n        const editData = editContext.getImageData(0, 0, IMAGE_SIZE.width, IMAGE_SIZE.height).data;\r\n        //const maskPNG = editCanvas.toDataURL(\"image/png\");\r\n        //console.log(\"predict:\", this.props.editCanvas.current.canvasRef.current.toDataURL());\r\n        const imageCanvas = this.props.imageCanvas.current.canvasRef.current;\r\n        const imageContext = imageCanvas.getContext('2d');\r\n        const imageData = imageContext.getImageData(0, 0, IMAGE_SIZE.width, IMAGE_SIZE.height).data;\r\n        //const imgPNG = imageCanvas.toDataURL(\"image/png\");\r\n\r\n        var newImage = new Array(IMAGE_SIZE.height);\r\n        for (var y = 0; y < IMAGE_SIZE.height; y++) {\r\n            var imageRow = new Array(IMAGE_SIZE.width);\r\n            for (var x = 0; x < IMAGE_SIZE.width; x++) {\r\n                var pixel = [\r\n                    imageData[4 * (y * IMAGE_SIZE.width + x)], // red\r\n                    imageData[4 * (y * IMAGE_SIZE.width + x) + 1], // green\r\n                    imageData[4 * (y * IMAGE_SIZE.width + x) + 2], // blue\r\n                    editData[4 * (y * IMAGE_SIZE.width + x) + 3], // alpha\r\n                ];\r\n\r\n                imageRow[x] = pixel;\r\n            }\r\n            newImage[y] = imageRow;\r\n        }\r\n\r\n\r\n        //console.log(\"predict:\", newImage);\r\n        /*\r\n        var fileName = \"networkInputImage\";\r\n        //const json = JSON.stringify(newImage);\r\n        //const blob = new Blob([json], { type: 'application/json' });\r\n        //const href = await URL.createObjectURL(blob);\r\n        var link = document.createElement('a');\r\n        link.href = imgPNG;\r\n        link.download = fileName + \".png\";\r\n        document.body.appendChild(link);\r\n        link.click();\r\n        document.body.removeChild(link);\r\n\r\n        fileName = \"networkInputMask\";\r\n        //const json = JSON.stringify(newImage);\r\n        //const blob = new Blob([json], { type: 'application/json' });\r\n        //const href = await URL.createObjectURL(blob);\r\n        var link = document.createElement('a');\r\n        link.href = maskPNG;\r\n        link.download = fileName + \".png\";\r\n        document.body.appendChild(link);\r\n        link.click();\r\n        document.body.removeChild(link);*/\r\n\r\n        //TODO\r\n        this.setState({ isLoading: true });\r\n        fetch('/inference', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                image: newImage,\r\n            })\r\n        }).then(response => response.json())\r\n        .then(response => {\r\n            this.setState({ isLoading: false });\r\n            console.log(response.image.length)\r\n            console.log(response)\r\n            console.log(response.image[0].length)\r\n            this.setState({ dialogOpen: true });\r\n\r\n            \r\n            const canvas = this.canvasRef.current;\r\n            const ctx = canvas.getContext('2d');\r\n\r\n            var imgData = ctx.createImageData(canvas.width, canvas.height);\r\n            var k = 0;\r\n            for (var i = 0; i < canvas.height; i++) {\r\n                for (var j = 0; j < canvas.width; j++) {\r\n                  imgData.data[k++] = response.image[i][j][0];\r\n                  imgData.data[k++] = response.image[i][j][1];\r\n                  imgData.data[k++] = response.image[i][j][2];\r\n                  imgData.data[k++] = 255;\r\n                }\r\n            }\r\n            \r\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n            ctx.putImageData(imgData, 0, 0);\r\n        });\r\n    }\r\n\r\n    handleClose() {\r\n        //console.log(\"this.state.dialogOpen\");\r\n        this.setState({ dialogOpen: false });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div style={{ position: 'relative' }}>\r\n                <Button variant=\"outlined\" color=\"primary\" onClick={this.predict.bind(this)} disabled={this.state.isLoading}>\r\n                    Predict\r\n                {this.state.isLoading && <CircularProgress size={24} style={{\r\n                        position: 'absolute', top: '50%',\r\n                        left: '50%',\r\n                        marginTop: -12,\r\n                        marginLeft: -12\r\n                    }} />}\r\n                </Button>\r\n                <Dialog onClose={this.handleClose} aria-labelledby=\"dialog-title\" open={this.state.dialogOpen}>\r\n                    <DialogTitle id=\"dialog-title\" onClose={this.handleClose}>\r\n                        Load Image\r\n                    </DialogTitle>\r\n                    <DialogContent dividers>\r\n                        <canvas ref={this.canvasRef} height={IMAGE_SIZE.height} width={IMAGE_SIZE.width}></canvas>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={this.handleClose} color=\"primary\">\r\n                            Close\r\n                        </Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}