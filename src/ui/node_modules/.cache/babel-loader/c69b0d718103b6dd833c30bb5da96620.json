{"ast":null,"code":"var _jsxFileName = \"/home/laptop/Documents/Uni/TUEML/Inpainting/FacialInpainting/gui/src/components/editCanvas/index.js\";\nimport React, { Component } from 'react';\nimport { IMAGE_SIZE } from '../../constants';\nexport default class index extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isPainting: false,\n      mousePosition: undefined\n    };\n    this.canvasRef = React.createRef();\n  }\n\n  componentDidMount() {\n    const canvas = this.canvasRef.current;\n    canvas.addEventListener('mouseup', this.exitPaint.bind(this));\n    canvas.addEventListener('mouseleave', this.exitPaint.bind(this));\n    canvas.addEventListener('mousedown', this.startPaint.bind(this));\n    canvas.addEventListener('mousemove', this.paint.bind(this)); //touchevents\n\n    canvas.addEventListener('touchend', this.exitPaint.bind(this));\n    canvas.addEventListener('touchstart', this.startPaint.bind(this));\n    canvas.addEventListener('touchmove', this.paint.bind(this));\n  }\n\n  startPaint(event) {\n    const coordinates = this.getCoordinates(event);\n\n    if (coordinates) {\n      this.setState({\n        mousePosition: coordinates\n      });\n      this.setState({\n        isPainting: true\n      });\n    }\n  }\n\n  paint(event) {\n    if (this.state.isPainting) {\n      const newMousePosition = this.getCoordinates(event);\n\n      if (this.state.mousePosition && newMousePosition) {\n        this.drawLine(this.state.mousePosition, newMousePosition);\n        this.setState({\n          mousePosition: newMousePosition\n        });\n      }\n    }\n  }\n\n  exitPaint() {\n    this.setState({\n      mousePosition: undefined\n    });\n    this.setState({\n      isPainting: false\n    });\n  }\n\n  getCoordinates(event) {\n    const canvas = this.canvasRef.current;\n    var rect = canvas.getBoundingClientRect();\n\n    if (window.TouchEvent && event instanceof TouchEvent) {\n      event.preventDefault();\n      return {\n        x: event.touches[0].clientX - rect.left,\n        y: event.touches[0].clientY - rect.top\n      };\n    } else {\n      //console.log(\"page:\", event.pageY);\n      //console.log(\"client:\", event.clientY);\n      return {\n        x: event.clientX - rect.left,\n        y: event.clientY - rect.top\n      };\n    } //console.log(event.pageY,canvas.offsetTop ,rect.top);\n\n  }\n\n  drawLine(originalMousePosition, newMousePosition) {\n    const canvas = this.canvasRef.current;\n    const context = canvas.getContext('2d');\n\n    if (context) {\n      context.strokeStyle = 'red';\n      context.lineJoin = 'round';\n      context.lineWidth = this.props.size;\n\n      if (this.props.erase) {\n        context.globalCompositeOperation = 'destination-out';\n      } else {\n        context.globalCompositeOperation = 'source-over';\n      }\n\n      context.beginPath();\n      context.moveTo(originalMousePosition.x, originalMousePosition.y);\n      context.lineTo(newMousePosition.x, newMousePosition.y);\n      context.closePath();\n      context.stroke();\n    }\n  }\n\n  clearCanvas() {\n    const canvas = this.canvasRef.current;\n    const context = canvas.getContext('2d');\n    context.clearRect(0, 0, canvas.width, canvas.height);\n  }\n\n  render() {\n    return React.createElement(\"canvas\", {\n      height: IMAGE_SIZE.height,\n      width: IMAGE_SIZE.width,\n      ref: this.canvasRef,\n      style: {\n        position: 'absolute',\n        left: 0,\n        top: 0,\n        zIndex: 1,\n        border: '1px black solid'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    });\n  }\n\n}","map":{"version":3,"sources":["/home/laptop/Documents/Uni/TUEML/Inpainting/FacialInpainting/gui/src/components/editCanvas/index.js"],"names":["React","Component","IMAGE_SIZE","index","constructor","props","state","isPainting","mousePosition","undefined","canvasRef","createRef","componentDidMount","canvas","current","addEventListener","exitPaint","bind","startPaint","paint","event","coordinates","getCoordinates","setState","newMousePosition","drawLine","rect","getBoundingClientRect","window","TouchEvent","preventDefault","x","touches","clientX","left","y","clientY","top","originalMousePosition","context","getContext","strokeStyle","lineJoin","lineWidth","size","erase","globalCompositeOperation","beginPath","moveTo","lineTo","closePath","stroke","clearCanvas","clearRect","width","height","render","position","zIndex","border"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,UAAT,QAA2B,iBAA3B;AAEA,eAAe,MAAMC,KAAN,SAAoBF,SAApB,CAA8B;AACzCG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,UAAU,EAAE,KADH;AAETC,MAAAA,aAAa,EAAEC;AAFN,KAAb;AAIA,SAAKC,SAAL,GAAiBV,KAAK,CAACW,SAAN,EAAjB;AACH;;AAEDC,EAAAA,iBAAiB,GAAG;AAChB,UAAMC,MAAM,GAAG,KAAKH,SAAL,CAAeI,OAA9B;AACAD,IAAAA,MAAM,CAACE,gBAAP,CAAwB,SAAxB,EAAmC,KAAKC,SAAL,CAAeC,IAAf,CAAoB,IAApB,CAAnC;AACAJ,IAAAA,MAAM,CAACE,gBAAP,CAAwB,YAAxB,EAAsC,KAAKC,SAAL,CAAeC,IAAf,CAAoB,IAApB,CAAtC;AACAJ,IAAAA,MAAM,CAACE,gBAAP,CAAwB,WAAxB,EAAqC,KAAKG,UAAL,CAAgBD,IAAhB,CAAqB,IAArB,CAArC;AACAJ,IAAAA,MAAM,CAACE,gBAAP,CAAwB,WAAxB,EAAqC,KAAKI,KAAL,CAAWF,IAAX,CAAgB,IAAhB,CAArC,EALgB,CAOhB;;AACAJ,IAAAA,MAAM,CAACE,gBAAP,CAAwB,UAAxB,EAAoC,KAAKC,SAAL,CAAeC,IAAf,CAAoB,IAApB,CAApC;AACAJ,IAAAA,MAAM,CAACE,gBAAP,CAAwB,YAAxB,EAAsC,KAAKG,UAAL,CAAgBD,IAAhB,CAAqB,IAArB,CAAtC;AACAJ,IAAAA,MAAM,CAACE,gBAAP,CAAwB,WAAxB,EAAqC,KAAKI,KAAL,CAAWF,IAAX,CAAgB,IAAhB,CAArC;AACH;;AAEDC,EAAAA,UAAU,CAACE,KAAD,EAAQ;AACd,UAAMC,WAAW,GAAG,KAAKC,cAAL,CAAoBF,KAApB,CAApB;;AACA,QAAIC,WAAJ,EAAiB;AACb,WAAKE,QAAL,CAAc;AAAEf,QAAAA,aAAa,EAAEa;AAAjB,OAAd;AACA,WAAKE,QAAL,CAAc;AAAEhB,QAAAA,UAAU,EAAE;AAAd,OAAd;AACH;AACJ;;AAGDY,EAAAA,KAAK,CAACC,KAAD,EAAQ;AACT,QAAI,KAAKd,KAAL,CAAWC,UAAf,EAA2B;AACvB,YAAMiB,gBAAgB,GAAG,KAAKF,cAAL,CAAoBF,KAApB,CAAzB;;AACA,UAAI,KAAKd,KAAL,CAAWE,aAAX,IAA4BgB,gBAAhC,EAAkD;AAC9C,aAAKC,QAAL,CAAc,KAAKnB,KAAL,CAAWE,aAAzB,EAAwCgB,gBAAxC;AACA,aAAKD,QAAL,CAAc;AAAEf,UAAAA,aAAa,EAAEgB;AAAjB,SAAd;AACH;AACJ;AACJ;;AAEDR,EAAAA,SAAS,GAAG;AACR,SAAKO,QAAL,CAAc;AAAEf,MAAAA,aAAa,EAAEC;AAAjB,KAAd;AACA,SAAKc,QAAL,CAAc;AAAEhB,MAAAA,UAAU,EAAE;AAAd,KAAd;AACH;;AAEDe,EAAAA,cAAc,CAACF,KAAD,EAAQ;AAClB,UAAMP,MAAM,GAAG,KAAKH,SAAL,CAAeI,OAA9B;AACA,QAAIY,IAAI,GAAGb,MAAM,CAACc,qBAAP,EAAX;;AACA,QAAIC,MAAM,CAACC,UAAP,IAAqBT,KAAK,YAAYS,UAA1C,EAAsD;AAClDT,MAAAA,KAAK,CAACU,cAAN;AACA,aAAO;AAAEC,QAAAA,CAAC,EAAEX,KAAK,CAACY,OAAN,CAAc,CAAd,EAAiBC,OAAjB,GAA2BP,IAAI,CAACQ,IAArC;AAA2CC,QAAAA,CAAC,EAAEf,KAAK,CAACY,OAAN,CAAc,CAAd,EAAiBI,OAAjB,GAA2BV,IAAI,CAACW;AAA9E,OAAP;AACH,KAHD,MAGO;AACH;AACA;AACA,aAAO;AAAEN,QAAAA,CAAC,EAAEX,KAAK,CAACa,OAAN,GAAgBP,IAAI,CAACQ,IAA1B;AAAgCC,QAAAA,CAAC,EAAEf,KAAK,CAACgB,OAAN,GAAgBV,IAAI,CAACW;AAAxD,OAAP;AACH,KAViB,CAWlB;;AACH;;AAEDZ,EAAAA,QAAQ,CAACa,qBAAD,EAAwBd,gBAAxB,EAA0C;AAC9C,UAAMX,MAAM,GAAG,KAAKH,SAAL,CAAeI,OAA9B;AACA,UAAMyB,OAAO,GAAG1B,MAAM,CAAC2B,UAAP,CAAkB,IAAlB,CAAhB;;AACA,QAAID,OAAJ,EAAa;AACTA,MAAAA,OAAO,CAACE,WAAR,GAAsB,KAAtB;AACAF,MAAAA,OAAO,CAACG,QAAR,GAAmB,OAAnB;AACAH,MAAAA,OAAO,CAACI,SAAR,GAAoB,KAAKtC,KAAL,CAAWuC,IAA/B;;AAEA,UAAI,KAAKvC,KAAL,CAAWwC,KAAf,EAAsB;AAClBN,QAAAA,OAAO,CAACO,wBAAR,GAAmC,iBAAnC;AACH,OAFD,MAEO;AACHP,QAAAA,OAAO,CAACO,wBAAR,GAAmC,aAAnC;AACH;;AAEDP,MAAAA,OAAO,CAACQ,SAAR;AACAR,MAAAA,OAAO,CAACS,MAAR,CAAeV,qBAAqB,CAACP,CAArC,EAAwCO,qBAAqB,CAACH,CAA9D;AACAI,MAAAA,OAAO,CAACU,MAAR,CAAezB,gBAAgB,CAACO,CAAhC,EAAmCP,gBAAgB,CAACW,CAApD;AACAI,MAAAA,OAAO,CAACW,SAAR;AAEAX,MAAAA,OAAO,CAACY,MAAR;AACH;AACJ;;AAEDC,EAAAA,WAAW,GAAG;AACV,UAAMvC,MAAM,GAAG,KAAKH,SAAL,CAAeI,OAA9B;AACA,UAAMyB,OAAO,GAAG1B,MAAM,CAAC2B,UAAP,CAAkB,IAAlB,CAAhB;AACAD,IAAAA,OAAO,CAACc,SAAR,CAAkB,CAAlB,EAAqB,CAArB,EAAwBxC,MAAM,CAACyC,KAA/B,EAAsCzC,MAAM,CAAC0C,MAA7C;AACH;;AAEDC,EAAAA,MAAM,GAAG;AACL,WACI;AAAQ,MAAA,MAAM,EAAEtD,UAAU,CAACqD,MAA3B;AAAmC,MAAA,KAAK,EAAErD,UAAU,CAACoD,KAArD;AAA4D,MAAA,GAAG,EAAE,KAAK5C,SAAtE;AAAiF,MAAA,KAAK,EAAE;AAAE+C,QAAAA,QAAQ,EAAE,UAAZ;AAAwBvB,QAAAA,IAAI,EAAE,CAA9B;AAAiCG,QAAAA,GAAG,EAAE,CAAtC;AAAyCqB,QAAAA,MAAM,EAAE,CAAjD;AAAoDC,QAAAA,MAAM,EAAE;AAA5D,OAAxF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ;AAIH;;AA/FwC","sourcesContent":["import React, { Component } from 'react'\r\nimport { IMAGE_SIZE } from '../../constants'\r\n\r\nexport default class index extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isPainting: false,\r\n            mousePosition: undefined\r\n        };\r\n        this.canvasRef = React.createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n        const canvas = this.canvasRef.current;\r\n        canvas.addEventListener('mouseup', this.exitPaint.bind(this));\r\n        canvas.addEventListener('mouseleave', this.exitPaint.bind(this));\r\n        canvas.addEventListener('mousedown', this.startPaint.bind(this));\r\n        canvas.addEventListener('mousemove', this.paint.bind(this));\r\n\r\n        //touchevents\r\n        canvas.addEventListener('touchend', this.exitPaint.bind(this));\r\n        canvas.addEventListener('touchstart', this.startPaint.bind(this));\r\n        canvas.addEventListener('touchmove', this.paint.bind(this));\r\n    }\r\n\r\n    startPaint(event) {\r\n        const coordinates = this.getCoordinates(event);\r\n        if (coordinates) {\r\n            this.setState({ mousePosition: coordinates });\r\n            this.setState({ isPainting: true });\r\n        }\r\n    };\r\n\r\n\r\n    paint(event) {\r\n        if (this.state.isPainting) {\r\n            const newMousePosition = this.getCoordinates(event);\r\n            if (this.state.mousePosition && newMousePosition) {\r\n                this.drawLine(this.state.mousePosition, newMousePosition);\r\n                this.setState({ mousePosition: newMousePosition });\r\n            }\r\n        }\r\n    }\r\n\r\n    exitPaint() {\r\n        this.setState({ mousePosition: undefined });\r\n        this.setState({ isPainting: false });\r\n    }\r\n\r\n    getCoordinates(event) {\r\n        const canvas = this.canvasRef.current;\r\n        var rect = canvas.getBoundingClientRect();\r\n        if (window.TouchEvent && event instanceof TouchEvent) {\r\n            event.preventDefault();\r\n            return { x: event.touches[0].clientX - rect.left, y: event.touches[0].clientY - rect.top };\r\n        } else {\r\n            //console.log(\"page:\", event.pageY);\r\n            //console.log(\"client:\", event.clientY);\r\n            return { x: event.clientX - rect.left, y: event.clientY - rect.top };\r\n        }\r\n        //console.log(event.pageY,canvas.offsetTop ,rect.top);\r\n    };\r\n\r\n    drawLine(originalMousePosition, newMousePosition) {\r\n        const canvas = this.canvasRef.current;\r\n        const context = canvas.getContext('2d');\r\n        if (context) {\r\n            context.strokeStyle = 'red';\r\n            context.lineJoin = 'round';\r\n            context.lineWidth = this.props.size;\r\n\r\n            if (this.props.erase) {\r\n                context.globalCompositeOperation = 'destination-out';\r\n            } else {\r\n                context.globalCompositeOperation = 'source-over';\r\n            }\r\n\r\n            context.beginPath();\r\n            context.moveTo(originalMousePosition.x, originalMousePosition.y);\r\n            context.lineTo(newMousePosition.x, newMousePosition.y);\r\n            context.closePath();\r\n\r\n            context.stroke();\r\n        }\r\n    };\r\n\r\n    clearCanvas() {\r\n        const canvas = this.canvasRef.current;\r\n        const context = canvas.getContext('2d');\r\n        context.clearRect(0, 0, canvas.width, canvas.height);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <canvas height={IMAGE_SIZE.height} width={IMAGE_SIZE.width} ref={this.canvasRef} style={{ position: 'absolute', left: 0, top: 0, zIndex: 1, border: '1px black solid' }}>\r\n            </canvas>\r\n        )\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}