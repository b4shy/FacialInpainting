{"ast":null,"code":"var _jsxFileName = \"/home/laptop/Documents/Uni/TUEML/Inpainting/FacialInpainting/refactor/src/ui/src/components/imageCrop/index.js\";\nimport React, { Component } from 'react';\nimport ReactCrop from 'react-image-crop';\nimport 'react-image-crop/dist/ReactCrop.css';\nimport { IMAGE_SIZE } from '../../constants';\nimport Button from '@material-ui/core/Button'; //https://github.com/DominicTobias/react-image-crop\n\nexport default class ImageCrop extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      src: null,\n      crop: {\n        unit: '%',\n        width: 100,\n        aspect: 1 / 1\n      }\n    };\n\n    this.onSelectFile = e => {\n      if (e.target.files && e.target.files.length > 0) {\n        const reader = new FileReader();\n        reader.addEventListener('load', () => this.setState({\n          src: reader.result\n        }));\n        reader.readAsDataURL(e.target.files[0]);\n      }\n    };\n\n    this.onImageLoaded = image => {\n      this.imageRef = image;\n    };\n\n    this.onCropComplete = (crop, percentCrop) => {\n      //this.makeClientCrop(percentCrop);\n      this.props.parentCallback({\n        crop: percentCrop,\n        src: this.state.src\n      });\n    };\n\n    this.onCropChange = (crop, percentCrop) => {\n      // You could also use percentCrop:\n      this.setState({\n        crop: percentCrop\n      });\n    };\n  }\n\n  render() {\n    const _this$state = this.state,\n          crop = _this$state.crop,\n          src = _this$state.src;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, !src && React.createElement(Button, {\n      variant: \"contained\",\n      component: \"label\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, \"Upload Image\", React.createElement(\"input\", {\n      type: \"file\",\n      accept: \"image/*\",\n      onChange: this.onSelectFile,\n      style: {\n        display: \"none\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    })), src && React.createElement(ReactCrop, {\n      src: src,\n      crop: crop,\n      ruleOfThirds: true,\n      onImageLoaded: this.onImageLoaded,\n      onComplete: this.onCropComplete,\n      onChange: this.onCropChange,\n      keepSelection: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, React.createElement(\"small\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, \"*Images get resized to \", IMAGE_SIZE.width, \" x \", IMAGE_SIZE.height, \" after loading\")));\n  }\n\n}","map":{"version":3,"sources":["/home/laptop/Documents/Uni/TUEML/Inpainting/FacialInpainting/refactor/src/ui/src/components/imageCrop/index.js"],"names":["React","Component","ReactCrop","IMAGE_SIZE","Button","ImageCrop","state","src","crop","unit","width","aspect","onSelectFile","e","target","files","length","reader","FileReader","addEventListener","setState","result","readAsDataURL","onImageLoaded","image","imageRef","onCropComplete","percentCrop","props","parentCallback","onCropChange","render","display","height"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport ReactCrop from 'react-image-crop';\r\nimport 'react-image-crop/dist/ReactCrop.css';\r\nimport { IMAGE_SIZE } from '../../constants';\r\nimport Button from '@material-ui/core/Button';\r\n\r\n//https://github.com/DominicTobias/react-image-crop\r\n\r\n\r\nexport default class ImageCrop extends Component {\r\n    state = {\r\n        src: null,\r\n        crop: {\r\n            unit: '%',\r\n            width: 100,\r\n            aspect: 1 / 1,\r\n        },\r\n    };\r\n\r\n    onSelectFile = e => {\r\n        if (e.target.files && e.target.files.length > 0) {\r\n            const reader = new FileReader();\r\n            reader.addEventListener('load', () =>\r\n                this.setState({ src: reader.result })\r\n            );\r\n            reader.readAsDataURL(e.target.files[0]);\r\n        }\r\n    };\r\n\r\n    // If you setState the crop in here you should return false.\r\n    onImageLoaded = image => {\r\n        this.imageRef = image;\r\n    };\r\n\r\n    onCropComplete = (crop, percentCrop) => {\r\n        //this.makeClientCrop(percentCrop);\r\n        this.props.parentCallback({crop: percentCrop, src: this.state.src});\r\n    };\r\n\r\n    onCropChange = (crop, percentCrop) => {\r\n        // You could also use percentCrop:\r\n        this.setState({ crop: percentCrop });\r\n    };\r\n\r\n    render() {\r\n        const { crop, src } = this.state;\r\n\r\n        return (\r\n            <div>\r\n                {!src &&\r\n                    <Button variant=\"contained\" component=\"label\">\r\n                        Upload Image\r\n                        <input type=\"file\" accept=\"image/*\" onChange={this.onSelectFile} style={{ display: \"none\" }} />\r\n                    </Button>}\r\n                {src && (\r\n                    <ReactCrop\r\n                        src={src}\r\n                        crop={crop}\r\n                        ruleOfThirds\r\n                        onImageLoaded={this.onImageLoaded}\r\n                        onComplete={this.onCropComplete}\r\n                        onChange={this.onCropChange}\r\n                        keepSelection={true}\r\n                    />\r\n                )}\r\n                <p>\r\n                    <small>\r\n                        *Images get resized to {IMAGE_SIZE.width} x {IMAGE_SIZE.height} after loading\r\n                    </small>\r\n                </p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}