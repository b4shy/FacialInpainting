{"ast":null,"code":"var _jsxFileName = \"/home/laptop/Documents/Uni/TUEML/Inpainting/FacialInpainting/src/ui/src/components/imageCanvas/index.js\";\nimport React, { Component } from 'react';\nimport { IMAGE_SIZE } from '../../constants';\nexport default class index extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      image: \"\",\n      crop: {},\n      size: 25,\n      erase: false\n    };\n    this.canvasRef = React.createRef();\n  }\n\n  componentDidUpdate() {\n    //console.log(\"image:\", this.props.src);\n    if (this.props.src !== \"\") {\n      var image = new Image();\n      image.src = this.props.src;\n      const canvas = this.canvasRef.current;\n      const context = canvas.getContext('2d');\n      context.clearRect(0, 0, canvas.width, canvas.height);\n      context.drawImage(image, this.props.crop.x * image.width / 100, this.props.crop.y * image.height / 100, this.props.crop.width * image.width / 100, this.props.crop.height * image.height / 100, 0, 0, IMAGE_SIZE.width, IMAGE_SIZE.height);\n    }\n  }\n\n  render() {\n    return React.createElement(\"canvas\", {\n      height: IMAGE_SIZE.height,\n      width: IMAGE_SIZE.width,\n      ref: this.canvasRef,\n      style: {\n        position: 'absolute',\n        left: 0,\n        top: 0,\n        zIndex: 0\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    });\n  }\n\n}","map":{"version":3,"sources":["/home/laptop/Documents/Uni/TUEML/Inpainting/FacialInpainting/src/ui/src/components/imageCanvas/index.js"],"names":["React","Component","IMAGE_SIZE","index","constructor","props","state","image","crop","size","erase","canvasRef","createRef","componentDidUpdate","src","Image","canvas","current","context","getContext","clearRect","width","height","drawImage","x","y","render","position","left","top","zIndex"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,UAAT,QAA2B,iBAA3B;AAEA,eAAe,MAAMC,KAAN,SAAoBF,SAApB,CAA8B;AACzCG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,KAAK,EAAE,EADE;AAETC,MAAAA,IAAI,EAAE,EAFG;AAGTC,MAAAA,IAAI,EAAE,EAHG;AAITC,MAAAA,KAAK,EAAE;AAJE,KAAb;AAMA,SAAKC,SAAL,GAAiBX,KAAK,CAACY,SAAN,EAAjB;AACH;;AAEDC,EAAAA,kBAAkB,GAAG;AACjB;AACA,QAAI,KAAKR,KAAL,CAAWS,GAAX,KAAmB,EAAvB,EAA2B;AACvB,UAAIP,KAAK,GAAG,IAAIQ,KAAJ,EAAZ;AACAR,MAAAA,KAAK,CAACO,GAAN,GAAY,KAAKT,KAAL,CAAWS,GAAvB;AAGA,YAAME,MAAM,GAAG,KAAKL,SAAL,CAAeM,OAA9B;AACA,YAAMC,OAAO,GAAGF,MAAM,CAACG,UAAP,CAAkB,IAAlB,CAAhB;AACAD,MAAAA,OAAO,CAACE,SAAR,CAAkB,CAAlB,EAAqB,CAArB,EAAwBJ,MAAM,CAACK,KAA/B,EAAsCL,MAAM,CAACM,MAA7C;AACAJ,MAAAA,OAAO,CAACK,SAAR,CACIhB,KADJ,EAEI,KAAKF,KAAL,CAAWG,IAAX,CAAgBgB,CAAhB,GAAoBjB,KAAK,CAACc,KAA1B,GAAkC,GAFtC,EAGI,KAAKhB,KAAL,CAAWG,IAAX,CAAgBiB,CAAhB,GAAoBlB,KAAK,CAACe,MAA1B,GAAmC,GAHvC,EAII,KAAKjB,KAAL,CAAWG,IAAX,CAAgBa,KAAhB,GAAwBd,KAAK,CAACc,KAA9B,GAAsC,GAJ1C,EAKI,KAAKhB,KAAL,CAAWG,IAAX,CAAgBc,MAAhB,GAAyBf,KAAK,CAACe,MAA/B,GAAwC,GAL5C,EAMI,CANJ,EAOI,CAPJ,EAQIpB,UAAU,CAACmB,KARf,EASInB,UAAU,CAACoB,MATf;AAWH;AACJ;;AAEDI,EAAAA,MAAM,GAAG;AACL,WACI;AAAQ,MAAA,MAAM,EAAExB,UAAU,CAACoB,MAA3B;AAAmC,MAAA,KAAK,EAAEpB,UAAU,CAACmB,KAArD;AAA4D,MAAA,GAAG,EAAE,KAAKV,SAAtE;AAAiF,MAAA,KAAK,EAAE;AAACgB,QAAAA,QAAQ,EAAE,UAAX;AAAuBC,QAAAA,IAAI,EAAE,CAA7B;AAAgCC,QAAAA,GAAG,EAAE,CAArC;AAAwCC,QAAAA,MAAM,EAAE;AAAhD,OAAxF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ;AAIH;;AAzCwC","sourcesContent":["import React, { Component } from 'react'\r\nimport { IMAGE_SIZE } from '../../constants'\r\n\r\nexport default class index extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            image: \"\",\r\n            crop: {},\r\n            size: 25,\r\n            erase: false\r\n        };\r\n        this.canvasRef = React.createRef();\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        //console.log(\"image:\", this.props.src);\r\n        if (this.props.src !== \"\") {\r\n            var image = new Image();\r\n            image.src = this.props.src;\r\n\r\n\r\n            const canvas = this.canvasRef.current;\r\n            const context = canvas.getContext('2d');\r\n            context.clearRect(0, 0, canvas.width, canvas.height);\r\n            context.drawImage(\r\n                image, \r\n                this.props.crop.x * image.width / 100,\r\n                this.props.crop.y * image.height / 100,\r\n                this.props.crop.width * image.width / 100,\r\n                this.props.crop.height * image.height / 100,\r\n                0, \r\n                0,\r\n                IMAGE_SIZE.width,\r\n                IMAGE_SIZE.height\r\n                );\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <canvas height={IMAGE_SIZE.height} width={IMAGE_SIZE.width} ref={this.canvasRef} style={{position: 'absolute', left: 0, top: 0, zIndex: 0}}>\r\n            </canvas>\r\n        )\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}