{"ast":null,"code":"var _jsxFileName = \"/home/laptop/Documents/Uni/TUEML/Inpainting/FacialInpainting/gui/src/components/editor/index.js\";\nimport React, { Component } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport RestoreIcon from '@material-ui/icons/Restore';\nimport { withStyles } from '@material-ui/core/styles';\nimport Switch from '@material-ui/core/Switch';\nimport Slider from '@material-ui/core/Slider';\nimport ImageCanvas from '../imageCanvas';\nimport EditCanvas from '../editCanvas';\nimport PredictionButton from '../predictionButton';\nimport { IMAGE_SIZE } from '../../constants';\nimport { Container } from '@material-ui/core';\nconst AntSwitch = withStyles(theme => ({\n  root: {\n    width: 28,\n    height: 16,\n    padding: 0,\n    display: 'flex'\n  },\n  switchBase: {\n    padding: 2,\n    color: theme.palette.grey[500],\n    '&$checked': {\n      transform: 'translateX(12px)',\n      color: theme.palette.common.white,\n      '& + $track': {\n        opacity: 1,\n        backgroundColor: theme.palette.primary.main,\n        borderColor: theme.palette.primary.main\n      }\n    }\n  },\n  thumb: {\n    width: 12,\n    height: 12,\n    boxShadow: 'none'\n  },\n  track: {\n    border: `1px solid ${theme.palette.grey[500]}`,\n    borderRadius: 16 / 2,\n    opacity: 1,\n    backgroundColor: theme.palette.common.white\n  },\n  checked: {}\n}))(Switch);\nconst marks = [{\n  value: 5,\n  label: '5px'\n}, {\n  value: 100,\n  label: '100px'\n}];\n\nfunction valuetext(value) {\n  return `${value}px`;\n}\n\nexport default class index extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      //image: \"\",\n      //crop: {},\n      size: 25,\n      erase: false\n    };\n    this.editCanvas = React.createRef();\n    this.imageCanvas = React.createRef();\n  }\n\n  handlePenChange(e) {\n    this.setState({\n      erase: !this.state.erase\n    });\n  }\n\n  handleSizeChange(value) {\n    this.setState({\n      size: value\n    });\n  }\n\n  handleClearDrawing(e) {\n    this.editCanvas.current.clearCanvas();\n    this.setState({\n      erase: false\n    });\n  }\n\n  render() {\n    //javascript code der bild in canvas lÃ¤dt\n    return React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      container: true,\n      spacing: 3,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, \"Size\"), React.createElement(Grid, {\n      item: true,\n      xs: 8,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, React.createElement(Slider, {\n      defaultValue: this.state.size,\n      getAriaValueText: valuetext,\n      step: 5,\n      valueLabelDisplay: \"auto\",\n      marks: marks,\n      min: 5,\n      max: 100,\n      onChangeCommitted: (event, value) => this.handleSizeChange(value),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }))), React.createElement(Grid, {\n      item: true,\n      xs: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      component: \"label\",\n      container: true,\n      alignItems: \"center\",\n      spacing: 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, \"Pen\"), React.createElement(Grid, {\n      item: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, React.createElement(AntSwitch, {\n      checked: this.state.erase,\n      onChange: this.handlePenChange.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    })), React.createElement(Grid, {\n      item: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, \"Eraser\"))), React.createElement(Grid, {\n      item: true,\n      xs: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"contained\",\n      color: \"secondary\",\n      startIcon: React.createElement(RestoreIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }),\n      onClick: this.handleClearDrawing.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, \"Reset\")), React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      style: {},\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, React.createElement(Container, {\n      style: {\n        position: 'relative',\n        width: IMAGE_SIZE.width,\n        height: IMAGE_SIZE.height,\n        cursor: 'crosshair'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, React.createElement(EditCanvas, {\n      size: this.state.size,\n      erase: this.state.erase,\n      ref: this.editCanvas,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }), React.createElement(ImageCanvas, {\n      crop: this.props.crop,\n      src: this.props.src,\n      ref: this.imageCanvas,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    })))), React.createElement(PredictionButton, {\n      editCanvas: this.editCanvas,\n      imageCanvas: this.imageCanvas,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["/home/laptop/Documents/Uni/TUEML/Inpainting/FacialInpainting/gui/src/components/editor/index.js"],"names":["React","Component","Grid","Button","RestoreIcon","withStyles","Switch","Slider","ImageCanvas","EditCanvas","PredictionButton","IMAGE_SIZE","Container","AntSwitch","theme","root","width","height","padding","display","switchBase","color","palette","grey","transform","common","white","opacity","backgroundColor","primary","main","borderColor","thumb","boxShadow","track","border","borderRadius","checked","marks","value","label","valuetext","index","constructor","props","state","size","erase","editCanvas","createRef","imageCanvas","handlePenChange","e","setState","handleSizeChange","handleClearDrawing","current","clearCanvas","render","event","bind","position","cursor","crop","src"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,WAAP,MAAwB,4BAAxB;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AAEA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,OAAOC,UAAP,MAAuB,eAAvB;AACA,OAAOC,gBAAP,MAA6B,qBAA7B;AACA,SAASC,UAAT,QAA2B,iBAA3B;AACA,SAASC,SAAT,QAA0B,mBAA1B;AAEA,MAAMC,SAAS,GAAGR,UAAU,CAACS,KAAK,KAAK;AACnCC,EAAAA,IAAI,EAAE;AACFC,IAAAA,KAAK,EAAE,EADL;AAEFC,IAAAA,MAAM,EAAE,EAFN;AAGFC,IAAAA,OAAO,EAAE,CAHP;AAIFC,IAAAA,OAAO,EAAE;AAJP,GAD6B;AAOnCC,EAAAA,UAAU,EAAE;AACRF,IAAAA,OAAO,EAAE,CADD;AAERG,IAAAA,KAAK,EAAEP,KAAK,CAACQ,OAAN,CAAcC,IAAd,CAAmB,GAAnB,CAFC;AAGR,iBAAa;AACTC,MAAAA,SAAS,EAAE,kBADF;AAETH,MAAAA,KAAK,EAAEP,KAAK,CAACQ,OAAN,CAAcG,MAAd,CAAqBC,KAFnB;AAGT,oBAAc;AACVC,QAAAA,OAAO,EAAE,CADC;AAEVC,QAAAA,eAAe,EAAEd,KAAK,CAACQ,OAAN,CAAcO,OAAd,CAAsBC,IAF7B;AAGVC,QAAAA,WAAW,EAAEjB,KAAK,CAACQ,OAAN,CAAcO,OAAd,CAAsBC;AAHzB;AAHL;AAHL,GAPuB;AAoBnCE,EAAAA,KAAK,EAAE;AACHhB,IAAAA,KAAK,EAAE,EADJ;AAEHC,IAAAA,MAAM,EAAE,EAFL;AAGHgB,IAAAA,SAAS,EAAE;AAHR,GApB4B;AAyBnCC,EAAAA,KAAK,EAAE;AACHC,IAAAA,MAAM,EAAG,aAAYrB,KAAK,CAACQ,OAAN,CAAcC,IAAd,CAAmB,GAAnB,CAAwB,EAD1C;AAEHa,IAAAA,YAAY,EAAE,KAAK,CAFhB;AAGHT,IAAAA,OAAO,EAAE,CAHN;AAIHC,IAAAA,eAAe,EAAEd,KAAK,CAACQ,OAAN,CAAcG,MAAd,CAAqBC;AAJnC,GAzB4B;AA+BnCW,EAAAA,OAAO,EAAE;AA/B0B,CAAL,CAAN,CAAV,CAgCd/B,MAhCc,CAAlB;AAkCA,MAAMgC,KAAK,GAAG,CACV;AACIC,EAAAA,KAAK,EAAE,CADX;AAEIC,EAAAA,KAAK,EAAE;AAFX,CADU,EAKV;AACID,EAAAA,KAAK,EAAE,GADX;AAEIC,EAAAA,KAAK,EAAE;AAFX,CALU,CAAd;;AAWA,SAASC,SAAT,CAAmBF,KAAnB,EAA0B;AACtB,SAAQ,GAAEA,KAAM,IAAhB;AACH;;AAED,eAAe,MAAMG,KAAN,SAAoBzC,SAApB,CAA8B;AACzC0C,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACT;AACA;AACAC,MAAAA,IAAI,EAAE,EAHG;AAITC,MAAAA,KAAK,EAAE;AAJE,KAAb;AAMA,SAAKC,UAAL,GAAkBhD,KAAK,CAACiD,SAAN,EAAlB;AACA,SAAKC,WAAL,GAAmBlD,KAAK,CAACiD,SAAN,EAAnB;AACH;;AAEDE,EAAAA,eAAe,CAACC,CAAD,EAAI;AACf,SAAKC,QAAL,CAAc;AAAEN,MAAAA,KAAK,EAAE,CAAC,KAAKF,KAAL,CAAWE;AAArB,KAAd;AACH;;AACDO,EAAAA,gBAAgB,CAACf,KAAD,EAAQ;AACpB,SAAKc,QAAL,CAAc;AAAEP,MAAAA,IAAI,EAAEP;AAAR,KAAd;AACH;;AAEDgB,EAAAA,kBAAkB,CAACH,CAAD,EAAI;AAClB,SAAKJ,UAAL,CAAgBQ,OAAhB,CAAwBC,WAAxB;AACA,SAAKJ,QAAL,CAAc;AAAEN,MAAAA,KAAK,EAAE;AAAT,KAAd;AACH;;AAEDW,EAAAA,MAAM,GAAG;AACL;AACA,WACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,IAAD;AAAM,MAAA,SAAS,MAAf;AAAgB,MAAA,OAAO,EAAE,CAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,EAAE,EAAE,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,EAAE,EAAE,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,EAII,oBAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,EAAE,EAAE,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,MAAD;AACI,MAAA,YAAY,EAAE,KAAKb,KAAL,CAAWC,IAD7B;AAEI,MAAA,gBAAgB,EAAEL,SAFtB;AAGI,MAAA,IAAI,EAAE,CAHV;AAII,MAAA,iBAAiB,EAAC,MAJtB;AAKI,MAAA,KAAK,EAAEH,KALX;AAMI,MAAA,GAAG,EAAE,CANT;AAOI,MAAA,GAAG,EAAE,GAPT;AAQI,MAAA,iBAAiB,EAAE,CAACqB,KAAD,EAAQpB,KAAR,KAAkB,KAAKe,gBAAL,CAAsBf,KAAtB,CARzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CAJJ,CADJ,EAkBI,oBAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,EAAE,EAAE,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,IAAD;AAAM,MAAA,SAAS,EAAC,OAAhB;AAAwB,MAAA,SAAS,MAAjC;AAAkC,MAAA,UAAU,EAAC,QAA7C;AAAsD,MAAA,OAAO,EAAE,CAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADJ,EAEI,oBAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,SAAD;AACI,MAAA,OAAO,EAAE,KAAKM,KAAL,CAAWE,KADxB;AAEI,MAAA,QAAQ,EAAE,KAAKI,eAAL,CAAqBS,IAArB,CAA0B,IAA1B,CAFd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CAFJ,EAQI,oBAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBARJ,CADJ,CAlBJ,EA8BI,oBAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,EAAE,EAAE,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,MAAD;AACI,MAAA,OAAO,EAAC,WADZ;AAEI,MAAA,KAAK,EAAC,WAFV;AAGI,MAAA,SAAS,EAAE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHf;AAII,MAAA,OAAO,EAAE,KAAKL,kBAAL,CAAwBK,IAAxB,CAA6B,IAA7B,CAJb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADJ,CA9BJ,EAwCI,oBAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,EAAE,EAAE,EAAf;AAAmB,MAAA,KAAK,EAAE,EAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,SAAD;AAAW,MAAA,KAAK,EAAE;AAAEC,QAAAA,QAAQ,EAAE,UAAZ;AAAwB7C,QAAAA,KAAK,EAAEL,UAAU,CAACK,KAA1C;AAAiDC,QAAAA,MAAM,EAAEN,UAAU,CAACM,MAApE;AAA4E6C,QAAAA,MAAM,EAAE;AAApF,OAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,UAAD;AAAY,MAAA,IAAI,EAAE,KAAKjB,KAAL,CAAWC,IAA7B;AAAmC,MAAA,KAAK,EAAE,KAAKD,KAAL,CAAWE,KAArD;AAA4D,MAAA,GAAG,EAAE,KAAKC,UAAtE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEI,oBAAC,WAAD;AAAa,MAAA,IAAI,EAAE,KAAKJ,KAAL,CAAWmB,IAA9B;AAAoC,MAAA,GAAG,EAAE,KAAKnB,KAAL,CAAWoB,GAApD;AAAyD,MAAA,GAAG,EAAE,KAAKd,WAAnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CADJ,CAxCJ,CADJ,EAiDI,oBAAC,gBAAD;AAAkB,MAAA,UAAU,EAAE,KAAKF,UAAnC;AAA+C,MAAA,WAAW,EAAE,KAAKE,WAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAjDJ,CADJ;AAqDH;;AAhFwC","sourcesContent":["import React, { Component } from 'react'\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Button from '@material-ui/core/Button';\r\nimport RestoreIcon from '@material-ui/icons/Restore';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport Slider from '@material-ui/core/Slider';\r\n\r\nimport ImageCanvas from '../imageCanvas';\r\nimport EditCanvas from '../editCanvas';\r\nimport PredictionButton from '../predictionButton';\r\nimport { IMAGE_SIZE } from '../../constants'\r\nimport { Container } from '@material-ui/core';\r\n\r\nconst AntSwitch = withStyles(theme => ({\r\n    root: {\r\n        width: 28,\r\n        height: 16,\r\n        padding: 0,\r\n        display: 'flex',\r\n    },\r\n    switchBase: {\r\n        padding: 2,\r\n        color: theme.palette.grey[500],\r\n        '&$checked': {\r\n            transform: 'translateX(12px)',\r\n            color: theme.palette.common.white,\r\n            '& + $track': {\r\n                opacity: 1,\r\n                backgroundColor: theme.palette.primary.main,\r\n                borderColor: theme.palette.primary.main,\r\n            },\r\n        },\r\n    },\r\n    thumb: {\r\n        width: 12,\r\n        height: 12,\r\n        boxShadow: 'none',\r\n    },\r\n    track: {\r\n        border: `1px solid ${theme.palette.grey[500]}`,\r\n        borderRadius: 16 / 2,\r\n        opacity: 1,\r\n        backgroundColor: theme.palette.common.white,\r\n    },\r\n    checked: {},\r\n}))(Switch);\r\n\r\nconst marks = [\r\n    {\r\n        value: 5,\r\n        label: '5px',\r\n    },\r\n    {\r\n        value: 100,\r\n        label: '100px',\r\n    },\r\n];\r\n\r\nfunction valuetext(value) {\r\n    return `${value}px`;\r\n}\r\n\r\nexport default class index extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            //image: \"\",\r\n            //crop: {},\r\n            size: 25,\r\n            erase: false\r\n        };\r\n        this.editCanvas = React.createRef();\r\n        this.imageCanvas = React.createRef();\r\n    }\r\n\r\n    handlePenChange(e) {\r\n        this.setState({ erase: !this.state.erase });\r\n    }\r\n    handleSizeChange(value) {\r\n        this.setState({ size: value });\r\n    }\r\n\r\n    handleClearDrawing(e) {\r\n        this.editCanvas.current.clearCanvas();\r\n        this.setState({ erase: false });\r\n    }\r\n\r\n    render() {\r\n        //javascript code der bild in canvas lÃ¤dt\r\n        return (\r\n            <Container>\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={4}>\r\n                        <Grid item xs={12}>\r\n                            Size\r\n                    </Grid>\r\n                        <Grid item xs={8}>\r\n                            <Slider\r\n                                defaultValue={this.state.size}\r\n                                getAriaValueText={valuetext}\r\n                                step={5}\r\n                                valueLabelDisplay=\"auto\"\r\n                                marks={marks}\r\n                                min={5}\r\n                                max={100}\r\n                                onChangeCommitted={(event, value) => this.handleSizeChange(value)}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <Grid component=\"label\" container alignItems=\"center\" spacing={1}>\r\n                            <Grid item>Pen</Grid>\r\n                            <Grid item>\r\n                                <AntSwitch\r\n                                    checked={this.state.erase}\r\n                                    onChange={this.handlePenChange.bind(this)}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item>Eraser</Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            color=\"secondary\"\r\n                            startIcon={<RestoreIcon />}\r\n                            onClick={this.handleClearDrawing.bind(this)}\r\n                        >\r\n                            Reset\r\n                    </Button>\r\n                    </Grid>\r\n                    <Grid item xs={12} style={{}}>\r\n                        <Container style={{ position: 'relative', width: IMAGE_SIZE.width, height: IMAGE_SIZE.height, cursor: 'crosshair' }}>\r\n                            <EditCanvas size={this.state.size} erase={this.state.erase} ref={this.editCanvas} />\r\n                            <ImageCanvas crop={this.props.crop} src={this.props.src} ref={this.imageCanvas}/>\r\n                        </Container>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                <PredictionButton editCanvas={this.editCanvas} imageCanvas={this.imageCanvas}/>\r\n            </Container>\r\n        )\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}